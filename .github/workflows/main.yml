# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1
  GKE_CLUSTER: cluster-2 # Add your cluster name here.
  GKE_ZONE: us-central1-c # Add your cluster zone here.
  DEPLOYMENT_NAME: nginx-deployment # Add your deployment name here.
  REPOSITORY: samples
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    # runs-on: ubuntu-latest
    # runs-on: arc-runner-set
    runs-on: self-hosted
    environment: production

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      # - run: |
      #     sudo apt-get update -y
      #     sudo apt-get install -y python2.7
      #     export CLOUDSDK_PYTHON="/usr/bin/python2"

      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ">=20"
          check-latest: true

      # Alternative option - authentication via credentials json
      - id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v2

      # # Configure Docker to use the gcloud command-line tool as a credential
      # # helper for authentication
      # - run: |-
      #     gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: Docker configuration
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # # Set up kustomize
      # - name: Set up Kustomize
      #   run: |-
      #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      #     chmod u+x ./kustomize

      # # Deploy the Docker image to the GKE cluster
      # ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      # ./kustomize build . | kubectl apply -f -
      - name: Deploy
        run: |-
          kubectl apply --validate=false -f deployment
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
